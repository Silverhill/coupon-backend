{"version":3,"sources":["../../../../server/routes/graphql/resolvers/company.resolver.js"],"names":["makerId","companyId","models","Maker","findByIdAndUpdate","company","updatedAt","Date","new","addCompanyToMaker","addCompany","parent","args","request","input","authentication","headers","findOne","_id","makerCompany","isEmpty","Error","createdAt","maker","upload","stream","filename","path","v2","uploader","error","result","logo","url","unlinkSync","Company","newCompany","save","message","myCompany","populate"],"mappings":"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","file":"company.resolver.js","sourcesContent":["import { extractUserIdFromToken } from '../../../services/model.service';\nimport _ from 'lodash';\nimport cloudinary from 'cloudinary';\nimport fs from 'fs';\nimport { storeFile } from './file.resolver';\n\nexport const addCompany = async (parent, args, { models, request }) => {\n  const { input } = args;\n  const { headers: { authentication } } = request;\n  const makerId = await extractUserIdFromToken(authentication);\n\n  const { company: makerCompany } = await models.Maker.findOne({ _id: makerId })\n\n  if (!_.isEmpty(makerCompany)) {\n    throw Error('Only one company can be created.');\n  }\n\n  const company = {\n    ...input,\n    createdAt: new Date(),\n    updatedAt: new Date(),\n    maker: makerId\n  }\n\n  if(company.upload){\n    const { stream, filename } = await company.upload;\n    const { path } = await storeFile({ stream, filename });\n    await cloudinary.v2.uploader.upload(path, (error, result) => {\n      if (result) {\n        company.logo = result.url;\n        fs.unlinkSync(path);\n      } else if (error) {\n        return error;\n      }\n    });\n  }\n\n  const newCompany = await new models.Company(company);\n\n  try {\n    await newCompany.save();\n    await addCompanyToMaker(makerId, newCompany._id, models)\n    return newCompany;\n  } catch (error) {\n    throw new Error(error.message || error);\n  }\n\n};\n\nexport const myCompany = async (parent, args, { models, request }) => {\n  const { headers: { authentication } } = request;\n  const makerId = await extractUserIdFromToken(authentication);\n\n  try {\n    const { company } = await models.Maker.findOne({ _id: makerId })\n                                          .populate('company');\n    return company;\n  } catch (error) {\n    return error;\n  }\n}\n\nasync function addCompanyToMaker(makerId, companyId, models) {\n  await models.Maker.findByIdAndUpdate(makerId,\n    {\n      company: companyId,\n      updatedAt: new Date()\n    },\n    { new: true }\n  );\n}\n\n"]}