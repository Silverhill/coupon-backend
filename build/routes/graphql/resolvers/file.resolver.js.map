{"version":3,"sources":["../../../../server/routes/graphql/resolvers/file.resolver.js"],"names":["uploadFile","parent","file","filename","v2","uploader","upload","error","result","storeFile","stream","path","uploadsFolder","Promise","resolve","reject","on","truncated","unlinkSync","pipe","createWriteStream"],"mappings":";;;;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEO,IAAMA;AAAA,qEAAa,iBAAOC,MAAP;AAAA,QAAiBC,IAAjB,SAAiBA,IAAjB;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACGA,IADH;;AAAA;AAAA;AAChBC,oBADgB,SAChBA,QADgB;AAAA;AAAA,mBAGX,qBAAWC,EAAX,CAAcC,QAAd,CAAuBC,MAAvB,CAA8BH,QAA9B,EAAwC,UAACI,KAAD,EAAQC,MAAR,EAAmB;AACtE,kBAAIA,MAAJ,EAAY;AACV,uBAAOA,MAAP;AACD,eAFD,MAEO,IAAID,KAAJ,EAAW;AAChB,uBAAOA,KAAP;AACD;AACF,aANY,CAHW;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAb;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAYA,IAAME,gCAAY,SAAZA,SAAY,QAA0B;AAAA,MAAvBC,MAAuB,SAAvBA,MAAuB;AAAA,MAAfP,QAAe,SAAfA,QAAe;;AACjD,MAAMQ,YAAU,iBAAOC,aAAjB,GAAiCT,QAAvC;AACA,SAAO,IAAIU,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV;AAAA,WACjBL,OACGM,EADH,CACM,OADN,EACe,iBAAS;AACpB,UAAIN,OAAOO,SAAX;AACE;AACA,qBAAGC,UAAH,CAAcP,IAAd;AACFI,aAAOR,KAAP;AACD,KANH,EAOGY,IAPH,CAOQ,aAAGC,iBAAH,CAAqBT,IAArB,CAPR,EAQGK,EARH,CAQM,OARN,EAQe;AAAA,aAASD,OAAOR,KAAP,CAAT;AAAA,KARf,EASGS,EATH,CASM,QATN,EASgB;AAAA,aAAMF,QAAQ,EAAEH,UAAF,EAAR,CAAN;AAAA,KAThB,CADiB;AAAA,GAAZ,CAAP;AAYD,CAdM","file":"file.resolver.js","sourcesContent":["\nimport cloudinary from 'cloudinary';\nimport fs from 'fs';\nimport config from '../../../config';\n\nexport const uploadFile = async (parent, { file }) => {\n  const { filename } = await file\n\n  return await cloudinary.v2.uploader.upload(filename, (error, result) => {\n    if (result) {\n      return result;\n    } else if (error) {\n      return error;\n    }\n  });\n};\n\nexport const storeFile = ({ stream, filename }) => {\n  const path = `${config.uploadsFolder}${filename}`;\n  return new Promise((resolve, reject) =>\n    stream\n      .on('error', error => {\n        if (stream.truncated)\n          // Delete the truncated file\n          fs.unlinkSync(path)\n        reject(error)\n      })\n      .pipe(fs.createWriteStream(path))\n      .on('error', error => reject(error))\n      .on('finish', () => resolve({ path }))\n  )\n}\n"]}