{"version":3,"sources":["../../../../server/routes/graphql/resolvers/coupon.resolver.js"],"names":["models","campaignId","match","Campaign","findOne","_id","populate","path","getCouponsFromCampaign","getCoupon","parent","args","id","Coupon","coupon","captureCoupon","request","input","authentication","headers","verify","secrets","session","hunterId","hunter","status","hunterCoupons","coupons","length","Error","huntedCoupons","getLastItem","findByIdAndUpdate","updatedAt","Date","new","updatedCoupon","Hunter","items","pop"],"mappings":"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","file":"coupon.resolver.js","sourcesContent":["import config from '../../../config';\nimport jwt from 'jsonwebtoken';\n\nexport const getCoupon = async (parent, args, { models }) => {\n\n  const { id } = args;\n  const coupon = await models.Coupon.findOne({ _id: id });\n  return coupon;\n};\n\nexport const captureCoupon = async (parent, args, { models, request }) => {\n  const { input: {campaignId} } = args;\n  const { headers: { authentication } } = request;\n  const { _id: hunterId } = await jwt.verify(authentication, config.secrets.session);\n\n  //TODO: Validar que la campaña tenga cupones disponibles\n  //TODO: Validar que la campaña este activa\n  //TODO: Actualizar el estado (status) del cupon acorde a las necesidades\n  //TODO: Al momento que se capturan todos los cupones disponibles se debe\n  //emitir un evento por sockets para actualizar la campaña en el frontend\n  try {\n\n    const { coupons: hunterCoupons } = await getCouponsFromCampaign(models, campaignId, {\n      hunter: hunterId,\n      status: 'hunted'\n    });\n\n    if (hunterCoupons.length === 1) {\n      throw new Error('You can only capture one coupon for this campaign.');\n    }\n\n    const { coupons, huntedCoupons } = await getCouponsFromCampaign(models, campaignId, {\n      status: 'available'\n    });\n\n    const coupon = getLastItem(coupons);\n\n    const updatedCoupon = await models.Coupon.findByIdAndUpdate(coupon._id,\n      {\n        hunter: hunterId,\n        status: 'hunted',\n        updatedAt: new Date()\n      },\n      { new: true }\n    );\n\n    await models.Hunter.findByIdAndUpdate(hunterId,\n      {\n        '$push': { 'coupons': updatedCoupon.id },\n        updatedAt: new Date()\n      },\n      { new: true }\n    );\n\n    await models.Campaign.findByIdAndUpdate(campaignId,\n      {\n        huntedCoupons: huntedCoupons + 1,\n        updatedAt: new Date()\n      },\n      { new: true }\n    );\n\n    return updatedCoupon;\n  } catch (error) {\n    return error;\n  }\n\n};\n\nasync function getCouponsFromCampaign(models, campaignId, match) {\n  return await models.Campaign.findOne({ _id: campaignId }).populate({\n    path: 'coupons',\n    match\n  });\n}\n\nfunction getLastItem(items) {\n  return items.pop();\n}\n"]}