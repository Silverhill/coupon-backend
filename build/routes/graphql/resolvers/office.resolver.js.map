{"version":3,"sources":["../../../../server/routes/graphql/resolvers/office.resolver.js"],"names":["addOffice","parent","args","models","request","input","companyId","authentication","headers","makerId","makerCompany","Maker","findOne","_id","populate","path","match","maker","company","Error","office","createdAt","Date","updatedAt","Office","newOffice","save","Company","findByIdAndUpdate","id","new","message","myOffices","offices","getOffice","officeId"],"mappings":"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","file":"office.resolver.js","sourcesContent":["import { extractUserIdFromToken } from '../../../services/model.service'\n\n//TODO: Valida RUC\nexport const addOffice = async (parent, args, { models, request }) => {\n  const { input } = args;\n  const { companyId } = input;\n  const { headers: { authentication } } = request;\n  const makerId = await extractUserIdFromToken(authentication);\n\n  let makerCompany = null;\n  try {\n    const maker = await models.Maker.findOne({ _id: makerId })\n                                    .populate({\n                                      path: 'company',\n                                      match: {\n                                        _id: companyId\n                                      }\n                                    });\n\n    makerCompany = maker.company;\n\n  } catch (error) {\n    throw Error('Invalid Company ID.');\n  }\n\n  const office = {\n    ...input,\n    createdAt: new Date(),\n    updatedAt: new Date(),\n    company: makerCompany._id\n  }\n\n  try {\n    const newOffice = await new models.Office(office);\n    await newOffice.save();\n\n    await models.Company.findByIdAndUpdate(makerCompany._id,\n      {\n        '$push': { 'offices': newOffice.id },\n        updatedAt: new Date()\n      },\n      { new: true }\n    );\n\n    return newOffice;\n  } catch (error) {\n    throw new Error(error.message || error);\n  }\n\n};\n\nexport const myOffices = async (parent, args, { models, request }) => {\n  const { headers: { authentication } } = request;\n  const makerId = await extractUserIdFromToken(authentication);\n\n  try {\n    const { offices } = await models.Company.findOne({ maker: makerId })\n                                            .populate('offices');\n    return offices;\n  } catch (error) {\n    return error;\n  }\n}\n\nexport const getOffice = async (parent, args, { models, request }) => {\n  const { id: officeId } = args;\n  const { headers: { authentication } } = request;\n  const makerId = await extractUserIdFromToken(authentication);\n\n  try {\n    const company = await models.Company.findOne({ maker: makerId });\n    const office = await models.Office.findOne({\n        _id: officeId,\n        company: company._id\n      });\n    office.company = company;\n    return office;\n  } catch (error) {\n    return error;\n  }\n}\n"]}