{"version":3,"sources":["../../../../server/routes/graphql/resolvers/user.resolver.js"],"names":["email","password","models","User","findOne","toLowerCase","user","Error","passwordIsValid","authenticate","expiresIn","role","token","sign","_id","secrets","session","loginUser","_user","hasValidRole","Hunter","Maker","provider","createdAt","Date","updatedAt","save","registerUser","companyName","makerId","company","businessName","maker","Company","newCompany","addCompanyToMaker","message","createCompany","companyId","findByIdAndUpdate","new","allUsers","parent","limit","skip","sortField","sortDirection","sortObject","count","total","find","sort","users","returnObject","totalCount","allMakers","makers","allHunters","hunters","getUser","args","id","me","request","headers","authentication","extractUserInfoFromToken","userId","populate","myCoupons","coupons","Coupon","path","select","myCouponsInfo","register","res","signUp","input","login","signIn","updatePassword","oldPass","toString","trim","newPass","verify","findById","addImageToUser","upload","stream","filename","v2","uploader","error","result","image","url","unlinkSync"],"mappings":"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","file":"user.resolver.js","sourcesContent":["import jwt from 'jsonwebtoken';\nimport fs from 'fs';\nimport cloudinary from 'cloudinary';\nimport config from '../../../config';\nimport { roleExist } from '../../../services/graphql.service';\nimport { storeFile } from './file.resolver';\n\n/**\n * QUERY\n */\nexport const allUsers = async (parent,\n                              {\n                                limit = 10,\n                                skip = 0,\n                                sortField = 'createdAt',\n                                sortDirection = 1\n                              }, { models }) => {\n  const sortObject = {};\n  sortObject[sortField] = sortDirection;\n  const total = await models.User.count({});\n  const users = await models.User.find({}, '-salt -password')\n                                 .limit(limit)\n                                 .skip(skip)\n                                 .sort(sortObject);\n  const returnObject = {\n    users: users,\n    totalCount: total\n  }\n  return returnObject;\n};\n\nexport const allMakers = async (parent, {\n                                          limit = 10,\n                                          skip = 0,\n                                          sortField = 'createdAt',\n                                          sortDirection = 1\n                                        }, { models }) => {\n  const sortObject = {};\n  sortObject[sortField] = sortDirection;\n  const total = await models.User.count({'_type': 'Maker'});\n  const users = await models.User.find({'_type': 'Maker'}, '-salt -password')\n                                 .limit(limit)\n                                 .skip(skip)\n                                 .sort(sortObject);\n  const returnObject = {\n    makers: users,\n    totalCount: total\n  }\n  return returnObject;\n\n};\n\nexport const allHunters = async (parent, {\n                                          limit = 10,\n                                          skip = 0,\n                                          sortField = 'createdAt',\n                                          sortDirection = 1\n                                        }, { models }) => {\n\n  const sortObject = {};\n  sortObject[sortField] = sortDirection;\n  const total = await models.User.count({'_type': 'Hunter'});\n  const users = await models.User.find({'_type': 'Hunter'}, '-salt -password')\n                                 .limit(limit)\n                                 .skip(skip)\n                                 .sort(sortObject);\n  const returnObject = {\n    hunters: users,\n    totalCount: total\n  }\n  return returnObject;\n};\n\nexport const getUser = async (parent, args, { models }) => {\n  const { id } = args;\n  const user = await models.User.findOne({ _id: id }, '-salt -password');\n  return user;\n};\n\nexport const me = async (parent, args, { models, request }) => {\n  const { headers: { authentication: token } } = request;\n  const { id: userId, role } = await extractUserInfoFromToken(token);\n\n  let user;\n  if(role === 'hunter') {\n    user = await models.Hunter\n      .findOne({ _id: userId }, '-salt -password')\n      .populate('coupons');\n  }\n  else if(role === 'maker') {\n    user = await models.Maker\n      .findOne({ _id: userId }, '-salt -password')\n      .populate('campaigns');\n  }\n  else if(role === 'admin') {\n    user = await models.User.findOne({ _id: userId }, '-salt -password');\n  }\n\n  return user;\n};\n\n\nexport const myCoupons = async (parent, args, { models, request }) => {\n  const { headers: { authentication: token } } = request;\n\n  const { id } = await extractUserInfoFromToken(token);\n  const { coupons } = await models.Hunter.findOne({ _id: id });\n  const myCouponsInfo = await models.Coupon.find({ _id: { \"$in\": coupons } })\n    .populate({\n      path: 'campaign',\n      select: '-coupons',\n      populate: {\n        path: 'maker',\n        select: '-campaigns'\n      }\n    });\n\n  return myCouponsInfo;\n}\n\n/**\n * MUTATIONS\n */\n\nexport const register = async (parent, { user: _user }, { models }) => {\n  try {\n    const res = await registerUser(_user, models);\n    return res;\n  } catch (error) {\n    return error;\n  }\n};\n\nexport const signUp = async (parent, args, { models }) => {\n  const { input: _user } = args;\n  const { company: companyName } = _user;\n\n  if (_user.company) {\n    delete _user.company;\n  }\n\n  try {\n\n    let res = await registerUser(_user, models);\n\n    if (res.role == 'maker') {\n      const newCompany = await createCompany(companyName, res._id, models);\n      res = await models.Maker.findByIdAndUpdate(res._id,\n        {\n          company: newCompany._id,\n          updatedAt: new Date()\n        },\n        { new: true }\n      );\n\n    }\n\n    return res;\n  } catch (error) {\n    return error;\n  }\n};\n\nexport const login = async (parent, { email, password }, { models }) => {\n  try {\n    const token = await loginUser(email, password, models);\n    return token;\n  } catch (error) {\n    return error;\n  }\n};\n\nexport const signIn = async (parent, args, { models }) => {\n  const { email, password } = args;\n  try {\n    const token = await loginUser(email, password, models);\n    return {\n      token\n    };\n  } catch (error) {\n    return error;\n  }\n};\n\nexport const updatePassword = async (parent, args, { models, request }) => {\n  const { input } = args;\n  const { headers: { authentication } } = request;\n  if(!authentication) throw new Error('You need logged to changue password');\n\n  const oldPass = input.oldPass.toString().trim();\n  const newPass = input.newPass.toString().trim();\n\n  const { _id } = jwt.verify(authentication, config.secrets.session);\n  let user = await models.User.findById(_id);\n\n  if (user.authenticate(oldPass)) {\n    user.password = newPass;\n    user.updatedAt = new Date()\n    user = await user.save();\n  } else {\n    throw new Error('Problem to changue the password');\n  }\n\n  return user;\n};\n\nexport const addImageToUser = async (parent, { upload } , { models, request }) => {\n  const { stream, filename } = await upload;\n  const { headers: { authentication: token } } = request;\n  const { id } = await extractUserInfoFromToken(token);\n\n  let user = await models.User.findOne({ _id: id });\n\n  const { path } = await storeFile({ stream, filename });\n  await cloudinary.v2.uploader.upload(path, async (error, result) => {\n    if (result) {\n      user.image = result.url;\n      user.updatedAt = new Date();\n      fs.unlinkSync(path);\n      user = await user.save();\n    } else if (error) {\n      return error;\n    }\n  });\n\n  return user;\n};\n\nasync function loginUser(email, password, models) {\n  const user = await models.User.findOne({ email: email.toLowerCase() });\n  if (!user) {\n    throw new Error('Not user with that email.');\n  }\n\n  const passwordIsValid = user.authenticate(password);\n  if (!passwordIsValid) {\n    throw new Error('Password is not correct.')\n  }\n\n  let expiresIn = '1y';\n  if (user.role === 'admin') {\n    expiresIn = 60 * 60 * 5;\n  }\n\n  const token = jwt.sign({ _id: user._id, role: user.role }, config.secrets.session, {\n    expiresIn\n  });\n\n  return token;\n}\n\nasync function registerUser(_user, models) {\n  const hasValidRole = roleExist(_user.role);\n  _user.role = (_user.role || 'hunter').toLowerCase();\n\n  if (!hasValidRole) throw new Error('Role is incorrect for the correct creation');\n  else if (_user.role === 'admin') throw new Error('You can not create users with admin role');\n  let user;\n  if (_user.role === 'hunter') user = await new models.Hunter(_user);\n  if (_user.role === 'maker') user = await new models.Maker(_user);\n  user.provider = 'local';\n  user.createdAt = new Date();\n  user.updatedAt = new Date();\n  user = await user.save();\n\n  return user;\n}\n\nasync function createCompany(companyName, makerId, models) {\n  if (companyName) {\n    const company = {\n      businessName: companyName,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      maker: makerId\n    }\n\n    const newCompany = await new models.Company(company);\n\n    try {\n      await newCompany.save();\n      await addCompanyToMaker(makerId, newCompany._id, models)\n      return newCompany;\n    } catch (error) {\n      throw new Error(error.message || error);\n    }\n  }\n}\n\nasync function addCompanyToMaker(makerId, companyId, models) {\n  await models.Maker.findByIdAndUpdate(makerId,\n    {\n      company: companyId,\n      updatedAt: new Date()\n    },\n    { new: true }\n  );\n}\n// User utils\nconst extractUserInfoFromToken = async (token) => {\n  try {\n    const { _id, role } = await jwt.verify(token, config.secrets.session);\n    return {id: _id, role};\n  } catch (error) {\n    return null;\n  }\n}\n"]}