{"version":3,"sources":["../../server/services/graphql.service.js"],"names":["requiresAuth","resolver","permissionsByRole","parent","args","context","headers","request","authentication","Error","verify","secrets","session","tokenInfo","hasRole","role","includes","filterUsersByRole","users","length","filter","user","roleExist","userRoles"],"mappings":";;;;;;;AAAA;;;;AACA;;;;;;;;AAEO,IAAMA,sCAAe,SAAfA,YAAe,CAACC,QAAD;AAAA,MAAWC,iBAAX,uEAA+B,EAA/B;AAAA;AAAA,uEAAsC,iBAAOC,MAAP,EAAeC,IAAf,EAAqBC,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAC5DJ,QAD4D;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAGhE;AACmBK,qBAJ6C,GAI/BD,OAJ+B,CAIxDE,OAJwD,CAI7CD,OAJ6C;AAK1DE,4BAL0D,GAKzCF,QAAQE,cALiC;;AAOhE;;AAPgE,kBAQ5DA,cAR4D;AAAA;AAAA;AAAA;;AAAA,oBASxD,IAAIC,KAAJ,CAAU,+BAAV,CATwD;;AAAA;AAAA;AAAA,qBAaxC,uBAAIC,MAAJ,CAAWF,cAAX,EAA2B,iBAAOG,OAAP,CAAeC,OAA1C,CAbwC;;AAAA;AAa1DC,uBAb0D;AAAA;AAAA,qBAe1DC,QAAQD,SAAR,EAAmBX,iBAAnB,CAf0D;;AAAA;AAAA,+CAkBzDD,SAASE,MAAT,EAAiBC,IAAjB,EAAuBC,OAAvB,CAlByD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAtC;;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB;;AAqBP,IAAMS;AAAA,sEAAU;AAAA,QAASC,IAAT,SAASA,IAAT;AAAA,QAAiBb,iBAAjB,uEAAqC,EAArC;AAAA;AAAA;AAAA;AAAA;AAAA,gBACTa,IADS;AAAA;AAAA;AAAA;;AAAA,kBAEN,IAAIN,KAAJ,CAAU,0BAAV,CAFM;;AAAA;AAAA,gBAKTP,kBAAkBc,QAAlB,CAA2BD,IAA3B,CALS;AAAA;AAAA;AAAA;;AAAA,kBAMN,IAAIN,KAAJ,+BAAsCM,IAAtC,YANM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAV;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAUO,IAAME,gDAAoB,SAApBA,iBAAoB,CAACC,KAAD,EAAQH,IAAR,EAAiB;AAChD,MAAG,CAACA,IAAD,IAAS,CAACG,MAAMC,MAAnB,EAA2B,OAAO,EAAP;AAC3B,SAAOD,MAAME,MAAN,CAAa;AAAA,WAAQC,KAAKN,IAAL,KAAcA,IAAtB;AAAA,GAAb,CAAP;AACD,CAHM;;AAKA,IAAMO,gCAAY,SAAZA,SAAY,OAAQ;AAC/B,SAAO,iBAAOC,SAAP,CAAiBP,QAAjB,CAA0BD,IAA1B,CAAP;AACD,CAFM","file":"graphql.service.js","sourcesContent":["import jwt from 'jsonwebtoken';\nimport config from '../config';\n\nexport const requiresAuth = (resolver, permissionsByRole = []) => async (parent, args, context) => {\n  if(!resolver) return;\n\n  // Get headers from the request passed to the context grapqhl schema\n  const { request: { headers } } = context;\n  const authentication = headers.authentication;\n\n  // Verify if header authentication with token exist\n  if(!authentication) {\n    throw new Error('Missing token authentication.');\n  }\n\n  // Verify if token is valid\n  const tokenInfo = await jwt.verify(authentication, config.secrets.session);\n\n  await hasRole(tokenInfo, permissionsByRole);\n\n  // Return graphql resolver\n  return resolver(parent, args, context);\n};\n\nconst hasRole = async ({ role }, permissionsByRole = []) => {\n  if (!role) {\n    throw new Error('Required role to be set.');\n  }\n\n  if( !permissionsByRole.includes(role) ) {\n    throw new Error(`Not have permissions for ${role} role.`);\n  }\n};\n\nexport const filterUsersByRole = (users, role) => {\n  if(!role || !users.length) return [];\n  return users.filter(user => user.role === role);\n}\n\nexport const roleExist = role => {\n  return config.userRoles.includes(role);\n}\n"]}