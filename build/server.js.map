{"version":3,"sources":["../server/server.js"],"names":["app","use","secret","resave","saveUninitialized","set","port","json","urlencoded","extended","static","join","__dirname","v1","Router","Promise","global","connect","mongoUrl","useMongoClient","error","console","connection","once","log","req","res","next","header","method","send","status","message","listen","get","sync","uploadsFolder","config","cloudinary"],"mappings":"AAAA;;;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;AAEA,IAAMA,MAAM,wBAAZ;;AAEAA,IAAIC,GAAJ,CAAQ,8BAAQ;AACdC,UAAQ,iBADM;AAEdC,UAAQ,KAFM;AAGdC,qBAAmB;AAHL,CAAR,CAAR;;AAMAJ,IAAIK,GAAJ,CAAQ,MAAR,EAAgB,iBAAOC,IAAvB;AACAN,IAAIC,GAAJ,CAAQ,qBAAWM,IAAX,EAAR;AACAP,IAAIC,GAAJ,CAAQ,qBAAWO,UAAX,CAAsB,EAAEC,UAAU,IAAZ,EAAtB,CAAR;;AAEA;AACAT,IAAIC,GAAJ,CAAQ,SAAR,EAAmB,kBAAQS,MAAR,CAAe,eAAKC,IAAL,CAAUC,SAAV,EAAqB,IAArB,EAA2B,QAA3B,CAAf,CAAnB;;AAEA,IAAIC,KAAK,kBAAQC,MAAR,EAAT;;AAEA,mBAASC,OAAT,GAAmBC,OAAOD,OAA1B;;AAEA,mBAASE,OAAT,CAAiB,iBAAOC,QAAxB,EAAkC,EAAEC,gBAAgB,IAAlB,EAAlC,EAA4D,UAACC,KAAD,EAAW;AACrE,MAAIA,KAAJ,EAAW;AACTC,YAAQD,KAAR,CAAc,oDAAd;AACA,UAAMA,KAAN;AACD;AACF,CALD;;AAOA,mBAASE,UAAT,CAAoBC,IAApB,CAAyB,MAAzB,EAAiC,YAAY;AAC3CF,UAAQG,GAAR,CAAY,kCAAZ;AACA;AACD,CAHD;;AAKA;AACAxB,IAAIC,GAAJ,CAAQ,UAASwB,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AAC/BD,MAAIE,MAAJ,CAAW,6BAAX,EAA0C,GAA1C;AACAF,MAAIE,MAAJ,CAAW,8BAAX,EAA2C,gEAA3C;AACA,MAAI,cAAcH,IAAII,MAAtB,EAA8B;AAC5BH,QAAII,IAAJ,CAAS,GAAT;AACD,GAFD,MAGK;AACHH;AACD;AACF,CATD;AAUA;AACAd,GAAGZ,GAAH,CAAO,GAAP;AACAY,GAAGZ,GAAH,CAAO,QAAP;AACAY,GAAGZ,GAAH,CAAO,GAAP;;AAEA;AACAY,GAAGZ,GAAH,CAAO,OAAP;;AAEA;;AAEA;AACAD,IAAIC,GAAJ,CAAQ,KAAR,EAAeY,EAAf;;AAEA;AACAb,IAAIC,GAAJ,CAAQ,GAAR,EAAaY,EAAb;;AAEA;AACAb,IAAIC,GAAJ,CAAQ,UAACwB,GAAD,EAAMC,GAAN,EAAc;AACpBA,MAAIK,MAAJ,CAAW,GAAX,EAAgBxB,IAAhB,CAAqB;AACnByB,aAAS;AADU,GAArB;AAGD,CAJD;;AAMAhC,IAAIiC,MAAJ,CAAWjC,IAAIkC,GAAJ,CAAQ,MAAR,CAAX,EAA4B,UAAUd,KAAV,EAAiB;AAC3C,MAAIA,KAAJ,EAAW;AACTC,YAAQG,GAAR,CAAYJ,KAAZ;AACD,GAFD,MAEO;AACLC,YAAQG,GAAR,CAAY,+BAAZ,EAA6CxB,IAAIkC,GAAJ,CAAQ,MAAR,CAA7C;AACD;AACF,CAND;;AAQA,iBAAOC,IAAP,CAAY,iBAAOC,aAAnB;;AAEA,qBAAWC,MAAX,CAAkB,iBAAOC,UAAzB;;kBAEetC,G","file":"server.js","sourcesContent":["'use strict';\n\nimport express from 'express';\nimport mongoose from 'mongoose';\nimport bodyParser from 'body-parser';\nimport mkdirp from 'mkdirp';\nimport home from './routes/home';\nimport user from './routes/user';\nimport auth from './routes/auth';\nimport graphql from './routes/graphql';\nimport path from 'path';\nimport session from 'express-session'\nimport config from './config'\nimport seedDatabaseIfNeeded from './config/seed';\nimport cloudinary from 'cloudinary';\n\n/* eslint-disable no-console */\n\nconst app = express();\n\napp.use(session({\n  secret: 'couponsecret123',\n  resave: false,\n  saveUninitialized: true\n}));\n\napp.set('port', config.port)\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n\n// Api doc\napp.use('/apidoc', express.static(path.join(__dirname, '..', 'apidoc')))\n\nlet v1 = express.Router()\n\nmongoose.Promise = global.Promise;\n\nmongoose.connect(config.mongoUrl, { useMongoClient: true }, (error) => {\n  if (error) {\n    console.error('Please make sure Mongodb is installed and running!');\n    throw error;\n  }\n});\n\nmongoose.connection.once('open', function () {\n  console.log('Mongodb: connection successful!!');\n  seedDatabaseIfNeeded();\n});\n\n//////////////// API ROUTES ////////////////\napp.use(function(req, res, next) {\n  res.header(\"Access-Control-Allow-Origin\", \"*\");\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept, authentication\");\n  if ('OPTIONS' === req.method) {\n    res.send(200);\n  }\n  else {\n    next();\n  }\n});\n//Users\nv1.use('/', home);\nv1.use('/users', user);\nv1.use('/', graphql);\n\n//Auth\nv1.use('/auth', auth);\n\n////////////////////////////////////////////\n\n// Api version\napp.use('/v1', v1);\n\n// Default API Version\napp.use('/', v1);\n\n// catch 404 and forward to error handler\napp.use((req, res) => {\n  res.status(404).json({\n    message: 'Route not found'\n  })\n})\n\napp.listen(app.get('port'), function (error) {\n  if (error) {\n    console.log(error);\n  } else {\n    console.log('COUPON API is running on port', app.get('port'))\n  }\n});\n\nmkdirp.sync(config.uploadsFolder);\n\ncloudinary.config(config.cloudinary);\n\nexport default app;\n"]}